{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getInitOptions","text","document","location","search","match","decodeURIComponent","Input","value","onChange","useState","setText","inputRef","useRef","spanRef","useEffect","current","style","width","offsetWidth","onChangeFn","useCallback","e","console","log","target","className","ref","defaultValue","position","height","overflow","whiteSpace","opacity","pointerEvents","zIndex","App","options","useMemo","showUsage","setShowUsage","canvasRef","QRCode","toCanvas","margin","scale","error","alert","message","onClick","borderBottom","pathname","Date","getFullYear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0PAWA,SAASA,IAAkB,IAAD,EAElBC,GACJ,WAFaC,SAASC,SAASC,QAAU,IAElCC,MAAM,2BAAb,eAAmC,KAAM,2BAC3C,MAAO,CAAEJ,KAAMK,mBAAmBL,IAGpC,SAASM,EAAT,GAAqC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtB,EAAwBC,mBAASF,GAAjC,mBAAOP,EAAP,KAAaU,EAAb,KACMC,EAAWC,mBACXC,EAAUD,mBAEhBE,qBAAU,WACJD,EAAQE,SAAWJ,EAASI,UAC9BJ,EAASI,QAAQC,MAAMC,MAAvB,UAAkCJ,EAAQE,QAAQG,YAAlD,SAED,CAACX,IAEJ,IAAMY,EAAaC,uBAAY,SAACC,GAC9BC,QAAQC,IAAI,QAASF,EAAEG,OAAOjB,OAC9BG,EAAQW,EAAEG,OAAOjB,OACjBC,EAASa,EAAEG,OAAOjB,SACjB,IAEH,OACE,eAAC,WAAD,WACE,uBACEkB,UAAU,QACVzB,KAAMA,EACNQ,SAAUW,EACVO,IAAKf,EACLgB,aAAc3B,IAEhB,sBACEyB,UAAU,QACVT,MAAO,CACLY,SAAU,WACVC,OAAQ,EACRC,SAAU,SACVC,WAAY,MACZC,QAAS,EACTC,cAAe,OACfC,QAAS,GAEXR,IAAKb,EAXP,SAaGb,OAkEMmC,MA5Df,WACE,IAAMC,EAAUC,kBAAQtC,EAAgB,IACxC,EAAwBU,mBAAS2B,EAAQpC,MAAzC,mBAAOA,EAAP,KAAaU,EAAb,KACA,EAAkCD,oBAAS,GAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KACMC,EAAY5B,mBAoBlB,OAlBAE,qBAAU,WACHd,IACLsB,QAAQC,IAAI,oBAAqBiB,EAAUzB,SAC3C0B,IAAOC,SACLF,EAAUzB,QACVf,EACA,CAAE2C,OAAQ,EAAGC,MAAO,IACpB,SAAUC,GACR,GAAIA,EAGF,OAFAvB,QAAQuB,MAAM,OAAQA,QACtBC,MAAM,WAAaD,EAAME,SAAW,yBAGtCzB,QAAQC,IAAI,kBAGf,CAACvB,IAGF,sBACEyB,UAAU,MACVuB,QAAS,WACHV,GAAWC,GAAa,IAHhC,UAME,yBAAQd,UAAU,aAAlB,UACE,wBAAQC,IAAKc,IACb,cAAClC,EAAD,CAAOC,MAAOP,EAAMQ,SAAUE,OAEhC,sBAAKe,UAAU,cAAf,UACGa,GACC,qBAAKb,UAAU,cAAcuB,QAAS,kBAAMT,GAAa,IAAzD,SACE,sBAAKd,UAAU,mBAAf,UACE,mBAAGA,UAAU,WAAb,2DAGA,oBAAGA,UAAU,SAAb,6CACmC,IACjC,sBAAMT,MAAO,CAAEiC,aAAc,sBAA7B,SACGhD,SAASC,SAASgD,SAAW,gCAMxC,qBAAKzB,UAAU,YAAYuB,QAAS,kBAAMT,GAAa,IAAvD,sBAIF,8DAA6B,IAAIY,MAAOC,cAAxC,iBC1GSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/D,SAASgE,eAAe,SAM1BZ,M","file":"static/js/main.3a5b34c3.chunk.js","sourcesContent":["import \"./App.css\";\nimport QRCode from \"qrcode\";\nimport {\n  useRef,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  Fragment,\n} from \"react\";\n\nfunction getInitOptions() {\n  const search = document.location.search || \"\";\n  const text =\n    search.match(/[?&]text=([^&]+)/)?.[1] || \"http://www.wesingapp.com\";\n  return { text: decodeURIComponent(text) };\n}\n\nfunction Input({ value, onChange }) {\n  const [text, setText] = useState(value);\n  const inputRef = useRef();\n  const spanRef = useRef();\n\n  useEffect(() => {\n    if (spanRef.current && inputRef.current) {\n      inputRef.current.style.width = `${spanRef.current.offsetWidth}px`;\n    }\n  }, [value]);\n\n  const onChangeFn = useCallback((e) => {\n    console.log(\"val::\", e.target.value);\n    setText(e.target.value);\n    onChange(e.target.value);\n  }, []);\n\n  return (\n    <Fragment>\n      <input\n        className=\"input\"\n        text={text}\n        onChange={onChangeFn}\n        ref={inputRef}\n        defaultValue={text}\n      />\n      <span\n        className=\"input\"\n        style={{\n          position: \"absolute\",\n          height: 0,\n          overflow: \"hidden\",\n          whiteSpace: \"pre\",\n          opacity: 0,\n          pointerEvents: \"none\",\n          zIndex: -1,\n        }}\n        ref={spanRef}\n      >\n        {text}\n      </span>\n    </Fragment>\n  );\n}\n\nfunction App() {\n  const options = useMemo(getInitOptions, []);\n  const [text, setText] = useState(options.text);\n  const [showUsage, setShowUsage] = useState(false);\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    if (!text) return;\n    console.log(\"canvasRef.current\", canvasRef.current);\n    QRCode.toCanvas(\n      canvasRef.current,\n      text,\n      { margin: 2, scale: 8 },\n      function (error) {\n        if (error) {\n          console.error(\"err:\", error);\n          alert(\"Error: \" + (error.message || \"unknown render error\"));\n          return;\n        }\n        console.log(\"success!\");\n      }\n    );\n  }, [text]);\n\n  return (\n    <div\n      className=\"App\"\n      onClick={() => {\n        if (showUsage) setShowUsage(false);\n      }}\n    >\n      <header className=\"App-header\">\n        <canvas ref={canvasRef}></canvas>\n        <Input value={text} onChange={setText} />\n      </header>\n      <div className=\"usage-block\">\n        {showUsage && (\n          <div className=\"usage-modal\" onClick={() => setShowUsage(false)}>\n            <div className=\"usage-modal-body\">\n              <p className=\"question\">\n                How to set initial QRCode value on page load?\n              </p>\n              <p className=\"answer\">\n                Append `text` params to url, eg:{\" \"}\n                <span style={{ borderBottom: \"1px dashed #9c9c9c\" }}>\n                  {document.location.pathname + '?text=\"hello world\"'}\n                </span>\n              </p>\n            </div>\n          </div>\n        )}\n        <div className=\"usage-btn\" onClick={() => setShowUsage(true)}>\n          Usage\n        </div>\n      </div>\n      <footer> Copyright Â© 2020 - {new Date().getFullYear()} Chuyik</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}